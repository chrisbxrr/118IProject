from openai import OpenAI
import streamlit as st
import base64
client = OpenAI(api_key="API KEY HERE") 

# FUNCTION 1: Computer Vision
st.title("Street Repair and Pothole Detection")
st.write("Upload an image of a street, and our AI will analyze it for signs of potholes or street repairs.")

uploaded_file = st.file_uploader("Upload an image", type=None, accept_multiple_files=False)

if uploaded_file:
    st.image(uploaded_file, caption="Uploaded Image", use_container_width=True)

    # Convert image to base64
    image_bytes = uploaded_file.read()
    base64_image = base64.b64encode(image_bytes).decode("utf-8")

    # Ask OpenAI to analyze the image
    with st.spinner("Analyzing the image using our vision tool!"):
        try:
            response = client.chat.completions.create(
                model="gpt-4-turbo",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": "Does this image show any signs of potholes or in need of street repairs? If so, provide a list of noticiable artifacts in the image that show signs of `potholes` or `street repairs`. Additionally in a separate list, provide a list of action items that can be taken to resolve the issues."},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{base64_image}"
                                },
                            },
                        ],
                    }
                ],
                max_tokens=1000,
            )

            result = response.choices[0].message.content
            st.subheader("Analysis Result:")
            st.write(result)

        except Exception as e:
            st.error(f"Error analyzing image: {e}")

# Function 2: Text Generation
client = OpenAI(api_key="OPENAI_API_KEY") 

# create function
def get_completion(prompt, model="gpt-3.5-turbo"): 
   completion = client.chat.completions.create(
        model=model,
        messages=[
        {"role": "system", "content": "You assist San Jose residents in reporting road obstructions, illegal dumping, and public blight.\nGiven a user description, determine if it’s an emergency:\n- If emergency (e.g., live wires, debris blocking highways, dangerous substances), tell the user to call 911.\n- If non-emergency, provide the correct contact:\n  - Road issues: San José Dept. of Transportation\n  - Waste/blight: Environmental Services Dept.\n  - General issues: Report via My San Jose app or https://www.sanjoseca.gov/your-government/departments-offices/public-works/my-san-josé\nGive clear next steps, include relevant phone numbers or links, and keep responses helpful and direct."}, 
        {"role": "user", "content": prompt},
        ]
    )
   return completion.choices[0].message.content

# create streamlit app
with st.form(key = "chat"):
    prompt = st.text_input("Please describe the obstruction you wish to report.") # TODO!
    
    submitted = st.form_submit_button("Submit")
    
    if submitted:
        st.write(get_completion(prompt))

# FUNCTION 3: NOTIFICATIONS
def send_notification(obstacle_description):
    """
    Notifies users about detected objects, hazards, or obstacles 
    and provides suggestions for the best course of action.
    
    Parameters:
    - obstacle_description (str): Description of the detected obstacle or hazard.
    
    Returns:
    - str: A notification message with a suggested action.
    """
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        temperature=0,
        messages=[
            {
                "role": "system",
                "content": "You are an AI assistant that helps users navigate obstacles safely. Based on the described hazard or obstacle, provide a clear alert and a recommended action to avoid or mitigate the issue."
            },
            {
                "role": "user",
                "content": obstacle_description
            }
        ]
    )
    
    notification_message = response.choices[0].message.content
    st.warning(f"⚠️ Alert: {notification_message}")
    return notification_message

